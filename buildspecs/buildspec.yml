version: 0.2

env:
  git-credential-helper: yes

phases:
  install:
    runtime-versions:
      docker: 19
  pre_build:
    commands:
      - echo Updating build badges ...
      - mkdir badges && cd ./badges
      - touch $BADGE_NAME-build.svg && touch badge-deployment-status.svg
      - curl -s "https://img.shields.io/badge/Build-InProgress-blue.svg" > $BADGE_NAME-build.svg
      - curl -s "https://img.shields.io/badge/Pipeline%20Status-InProgress-blue.svg" > badge-deployment-status.svg
      - aws s3 sync . s3://$S3_EXTRAS_BUCKET/badges --acl public-read
      - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" $BADGE_NAME-build.svg s3://$S3_EXTRAS_BUCKET/badges/$BADGE_NAME-build.svg
      - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" badge-deployment-status.svg s3://$S3_EXTRAS_BUCKET/badges/badge-deployment-status.svg
      - cd ..
      - rm -rf ./badges
      - echo Setting variables ...
      - buildExitCode=1
      - echo Logging in to Amazon ECR...
      - export COMMIT_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:7}
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - echo Setting image tag
      - export IMAGE_TAG=`date +%y.%m%d`.$CODEBUILD_BUILD_NUMBER.$COMMIT_TAG
      - export GIT_TAG=`date +%y.%m%d`.$CODEBUILD_BUILD_NUMBER.$ENVIRONMENT
  build:
    commands:
      - echo Building the Docker image with tag $IMAGE_TAG
      - docker login -u $DOCKER_USERNAME -p $DOCKER_TOKEN
      - docker build -f Dockerfile.build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - buildExitCode=$?
    finally:
      - |
        if [ "$buildExitCode" -ne 0 ]; then
          echo "failing"
          badge_status=failed
          badge_colour=red
          pipeline_status=failed
          pipeline_color=red
        else
          echo "passing"
          badge_status=passed
          badge_colour=green
          pipeline_status=InProgress
          pipeline_color=blue
        fi
      - echo build status $badge_status
      - mkdir badges && cd ./badges
      - touch $BADGE_NAME-build.svg && touch badge-deployment-status.svg
      - curl -s "https://img.shields.io/badge/Build-$badge_status-$badge_colour.svg" > $BADGE_NAME-build.svg
      - curl -s "https://img.shields.io/badge/Pipeline%20Status-$pipeline_status-$pipeline_color.svg" > badge-deployment-status.svg
      - aws s3 sync . s3://$S3_EXTRAS_BUCKET/badges --acl public-read
      - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" $BADGE_NAME-build.svg s3://$S3_EXTRAS_BUCKET/badges/$BADGE_NAME-build.svg
      - aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" badge-deployment-status.svg s3://$S3_EXTRAS_BUCKET/badges/badge-deployment-status.svg
      - cd ..
      - rm -rf ./badges
  post_build:
    commands:
      - echo Creating git tag and push git tag ....
      - git tag $GIT_TAG $COMMIT_TAG
      - git push origin $GIT_TAG
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - echo Writing image definitions file...
      - printf '[{"name":"%s","imageUri":"%s"}]' $TASK_CONTAINER_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest > imagedefinitions.json
    finally:
      - rm -f .env*
artifacts:
  files: imagedefinitions.json
