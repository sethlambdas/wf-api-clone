####################################
### BASE
####################################
FROM node:18-alpine as base

LABEL org.opencontainers.image.authors=devs@lambdas.io
LABEL org.opencontainers.image.title="Node.js images"
LABEL io.lambdas.nodeversion=$NODE_VERSION

ENV NODE_ENV=production

EXPOSE 3001

ENV PORT 3001

WORKDIR /app

COPY package*.json ./

COPY pnpm-lock.yaml ./

RUN npm install -g pnpm

RUN pnpm config list

RUN pnpm install --no-frozen-lockfile

ENV PATH /app/node_modules/.bin:$PATH

RUN apk add --no-cache tini curl

RUN addgroup appgroup \
    && adduser -G appgroup -D appuser

ENTRYPOINT ["tini", "--", "sh", "./entrypoint.sh"]

####################################
### DEV
####################################
FROM base as dev

ENV NODE_ENV=development

RUN pnpm config list

RUN pnpm install --no-frozen-lockfile

RUN chown -R appuser:appgroup /app

USER appuser

CMD ["nodemon"]

####################################
### TEST
####################################
FROM dev as test

COPY . .

# Add any test related commands here

####################################
### PRE PRODUCTION
####################################
FROM test as pre-prod

RUN pnpm run build

# RUN rm -rf ./test* \
#     && rm -rf ./node_modules

####################################
### PRODUCTION
####################################
FROM base as prod

ARG AWS_SECRET_ACCESS_KEY
ARG AWS_ACCESS_KEY_ID

ENV AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
ENV AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}

RUN apk add --no-cache python3 py-pip jq \
    && pip install awscli --break-system-packages

COPY --from=pre-prod /app/config/default.yml /app/config/
COPY --from=pre-prod /app/config/production.yml /app/config/
COPY --from=pre-prod /app/dist /app
COPY --from=pre-prod /app/entrypoint.sh /app

RUN chown -R appuser:appgroup /app

RUN chmod +x /app/entrypoint.sh

USER appuser:appgroup
